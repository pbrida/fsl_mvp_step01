# Ideally, we'd just do "from _socket import *". Unfortunately, socket
# overrides some definitions from _socket incompatibly. mypy incorrectly
# prefers the definitions from _socket over those defined here.
import _socket
import sys
from _socket import (
    CAPI as CAPI,
)
from _socket import (
    EAI_AGAIN as EAI_AGAIN,
)
from _socket import (
    EAI_BADFLAGS as EAI_BADFLAGS,
)
from _socket import (
    EAI_FAIL as EAI_FAIL,
)
from _socket import (
    EAI_FAMILY as EAI_FAMILY,
)
from _socket import (
    EAI_MEMORY as EAI_MEMORY,
)
from _socket import (
    EAI_NODATA as EAI_NODATA,
)
from _socket import (
    EAI_NONAME as EAI_NONAME,
)
from _socket import (
    EAI_SERVICE as EAI_SERVICE,
)
from _socket import (
    EAI_SOCKTYPE as EAI_SOCKTYPE,
)
from _socket import (
    INADDR_ALLHOSTS_GROUP as INADDR_ALLHOSTS_GROUP,
)
from _socket import (
    INADDR_ANY as INADDR_ANY,
)
from _socket import (
    INADDR_BROADCAST as INADDR_BROADCAST,
)
from _socket import (
    INADDR_LOOPBACK as INADDR_LOOPBACK,
)
from _socket import (
    INADDR_MAX_LOCAL_GROUP as INADDR_MAX_LOCAL_GROUP,
)
from _socket import (
    INADDR_NONE as INADDR_NONE,
)
from _socket import (
    INADDR_UNSPEC_GROUP as INADDR_UNSPEC_GROUP,
)
from _socket import (
    IP_ADD_MEMBERSHIP as IP_ADD_MEMBERSHIP,
)
from _socket import (
    IP_DROP_MEMBERSHIP as IP_DROP_MEMBERSHIP,
)
from _socket import (
    IP_HDRINCL as IP_HDRINCL,
)
from _socket import (
    IP_MULTICAST_IF as IP_MULTICAST_IF,
)
from _socket import (
    IP_MULTICAST_LOOP as IP_MULTICAST_LOOP,
)
from _socket import (
    IP_MULTICAST_TTL as IP_MULTICAST_TTL,
)
from _socket import (
    IP_OPTIONS as IP_OPTIONS,
)
from _socket import (
    IP_TOS as IP_TOS,
)
from _socket import (
    IP_TTL as IP_TTL,
)
from _socket import (
    IPPORT_RESERVED as IPPORT_RESERVED,
)
from _socket import (
    IPPORT_USERRESERVED as IPPORT_USERRESERVED,
)
from _socket import (
    IPPROTO_AH as IPPROTO_AH,
)
from _socket import (
    IPPROTO_DSTOPTS as IPPROTO_DSTOPTS,
)
from _socket import (
    IPPROTO_EGP as IPPROTO_EGP,
)
from _socket import (
    IPPROTO_ESP as IPPROTO_ESP,
)
from _socket import (
    IPPROTO_FRAGMENT as IPPROTO_FRAGMENT,
)
from _socket import (
    IPPROTO_HOPOPTS as IPPROTO_HOPOPTS,
)
from _socket import (
    IPPROTO_ICMP as IPPROTO_ICMP,
)
from _socket import (
    IPPROTO_ICMPV6 as IPPROTO_ICMPV6,
)
from _socket import (
    IPPROTO_IDP as IPPROTO_IDP,
)
from _socket import (
    IPPROTO_IGMP as IPPROTO_IGMP,
)
from _socket import (
    IPPROTO_IP as IPPROTO_IP,
)
from _socket import (
    IPPROTO_IPV6 as IPPROTO_IPV6,
)
from _socket import (
    IPPROTO_NONE as IPPROTO_NONE,
)
from _socket import (
    IPPROTO_PIM as IPPROTO_PIM,
)
from _socket import (
    IPPROTO_PUP as IPPROTO_PUP,
)
from _socket import (
    IPPROTO_RAW as IPPROTO_RAW,
)
from _socket import (
    IPPROTO_ROUTING as IPPROTO_ROUTING,
)
from _socket import (
    IPPROTO_SCTP as IPPROTO_SCTP,
)
from _socket import (
    IPPROTO_TCP as IPPROTO_TCP,
)
from _socket import (
    IPPROTO_UDP as IPPROTO_UDP,
)
from _socket import (
    IPV6_CHECKSUM as IPV6_CHECKSUM,
)
from _socket import (
    IPV6_DONTFRAG as IPV6_DONTFRAG,
)
from _socket import (
    IPV6_HOPLIMIT as IPV6_HOPLIMIT,
)
from _socket import (
    IPV6_HOPOPTS as IPV6_HOPOPTS,
)
from _socket import (
    IPV6_JOIN_GROUP as IPV6_JOIN_GROUP,
)
from _socket import (
    IPV6_LEAVE_GROUP as IPV6_LEAVE_GROUP,
)
from _socket import (
    IPV6_MULTICAST_HOPS as IPV6_MULTICAST_HOPS,
)
from _socket import (
    IPV6_MULTICAST_IF as IPV6_MULTICAST_IF,
)
from _socket import (
    IPV6_MULTICAST_LOOP as IPV6_MULTICAST_LOOP,
)
from _socket import (
    IPV6_PKTINFO as IPV6_PKTINFO,
)
from _socket import (
    IPV6_RECVRTHDR as IPV6_RECVRTHDR,
)
from _socket import (
    IPV6_RECVTCLASS as IPV6_RECVTCLASS,
)
from _socket import (
    IPV6_RTHDR as IPV6_RTHDR,
)
from _socket import (
    IPV6_TCLASS as IPV6_TCLASS,
)
from _socket import (
    IPV6_UNICAST_HOPS as IPV6_UNICAST_HOPS,
)
from _socket import (
    IPV6_V6ONLY as IPV6_V6ONLY,
)
from _socket import (
    NI_DGRAM as NI_DGRAM,
)
from _socket import (
    NI_MAXHOST as NI_MAXHOST,
)
from _socket import (
    NI_MAXSERV as NI_MAXSERV,
)
from _socket import (
    NI_NAMEREQD as NI_NAMEREQD,
)
from _socket import (
    NI_NOFQDN as NI_NOFQDN,
)
from _socket import (
    NI_NUMERICHOST as NI_NUMERICHOST,
)
from _socket import (
    NI_NUMERICSERV as NI_NUMERICSERV,
)
from _socket import (
    SHUT_RD as SHUT_RD,
)
from _socket import (
    SHUT_RDWR as SHUT_RDWR,
)
from _socket import (
    SHUT_WR as SHUT_WR,
)
from _socket import (
    SO_ACCEPTCONN as SO_ACCEPTCONN,
)
from _socket import (
    SO_BROADCAST as SO_BROADCAST,
)
from _socket import (
    SO_DEBUG as SO_DEBUG,
)
from _socket import (
    SO_DONTROUTE as SO_DONTROUTE,
)
from _socket import (
    SO_ERROR as SO_ERROR,
)
from _socket import (
    SO_KEEPALIVE as SO_KEEPALIVE,
)
from _socket import (
    SO_LINGER as SO_LINGER,
)
from _socket import (
    SO_OOBINLINE as SO_OOBINLINE,
)
from _socket import (
    SO_RCVBUF as SO_RCVBUF,
)
from _socket import (
    SO_RCVLOWAT as SO_RCVLOWAT,
)
from _socket import (
    SO_RCVTIMEO as SO_RCVTIMEO,
)
from _socket import (
    SO_REUSEADDR as SO_REUSEADDR,
)
from _socket import (
    SO_SNDBUF as SO_SNDBUF,
)
from _socket import (
    SO_SNDLOWAT as SO_SNDLOWAT,
)
from _socket import (
    SO_SNDTIMEO as SO_SNDTIMEO,
)
from _socket import (
    SO_TYPE as SO_TYPE,
)
from _socket import (
    SOL_IP as SOL_IP,
)
from _socket import (
    SOL_SOCKET as SOL_SOCKET,
)
from _socket import (
    SOL_TCP as SOL_TCP,
)
from _socket import (
    SOL_UDP as SOL_UDP,
)
from _socket import (
    SOMAXCONN as SOMAXCONN,
)
from _socket import (
    TCP_FASTOPEN as TCP_FASTOPEN,
)
from _socket import (
    TCP_KEEPCNT as TCP_KEEPCNT,
)
from _socket import (
    TCP_KEEPINTVL as TCP_KEEPINTVL,
)
from _socket import (
    TCP_MAXSEG as TCP_MAXSEG,
)
from _socket import (
    TCP_NODELAY as TCP_NODELAY,
)
from _socket import (
    SocketType as SocketType,
)
from _socket import (
    _Address as _Address,
)
from _socket import (
    _RetAddress as _RetAddress,
)
from _socket import (
    close as close,
)
from _socket import (
    dup as dup,
)
from _socket import (
    getdefaulttimeout as getdefaulttimeout,
)
from _socket import (
    gethostbyaddr as gethostbyaddr,
)
from _socket import (
    gethostbyname as gethostbyname,
)
from _socket import (
    gethostbyname_ex as gethostbyname_ex,
)
from _socket import (
    gethostname as gethostname,
)
from _socket import (
    getnameinfo as getnameinfo,
)
from _socket import (
    getprotobyname as getprotobyname,
)
from _socket import (
    getservbyname as getservbyname,
)
from _socket import (
    getservbyport as getservbyport,
)
from _socket import (
    has_ipv6 as has_ipv6,
)
from _socket import (
    htonl as htonl,
)
from _socket import (
    htons as htons,
)
from _socket import (
    if_indextoname as if_indextoname,
)
from _socket import (
    if_nameindex as if_nameindex,
)
from _socket import (
    if_nametoindex as if_nametoindex,
)
from _socket import (
    inet_aton as inet_aton,
)
from _socket import (
    inet_ntoa as inet_ntoa,
)
from _socket import (
    inet_ntop as inet_ntop,
)
from _socket import (
    inet_pton as inet_pton,
)
from _socket import (
    ntohl as ntohl,
)
from _socket import (
    ntohs as ntohs,
)
from _socket import (
    setdefaulttimeout as setdefaulttimeout,
)
from collections.abc import Iterable
from enum import IntEnum, IntFlag
from io import BufferedReader, BufferedRWPair, BufferedWriter, IOBase, RawIOBase, TextIOWrapper
from typing import Any, Literal, Protocol, SupportsIndex, overload, type_check_only

from _typeshed import ReadableBuffer, Unused, WriteableBuffer
from typing_extensions import Self

__all__ = [
    "fromfd",
    "getfqdn",
    "create_connection",
    "create_server",
    "has_dualstack_ipv6",
    "AddressFamily",
    "SocketKind",
    "AF_APPLETALK",
    "AF_DECnet",
    "AF_INET",
    "AF_INET6",
    "AF_IPX",
    "AF_SNA",
    "AF_UNSPEC",
    "AI_ADDRCONFIG",
    "AI_ALL",
    "AI_CANONNAME",
    "AI_NUMERICHOST",
    "AI_NUMERICSERV",
    "AI_PASSIVE",
    "AI_V4MAPPED",
    "CAPI",
    "EAI_AGAIN",
    "EAI_BADFLAGS",
    "EAI_FAIL",
    "EAI_FAMILY",
    "EAI_MEMORY",
    "EAI_NODATA",
    "EAI_NONAME",
    "EAI_SERVICE",
    "EAI_SOCKTYPE",
    "INADDR_ALLHOSTS_GROUP",
    "INADDR_ANY",
    "INADDR_BROADCAST",
    "INADDR_LOOPBACK",
    "INADDR_MAX_LOCAL_GROUP",
    "INADDR_NONE",
    "INADDR_UNSPEC_GROUP",
    "IPPORT_RESERVED",
    "IPPORT_USERRESERVED",
    "IPPROTO_AH",
    "IPPROTO_DSTOPTS",
    "IPPROTO_EGP",
    "IPPROTO_ESP",
    "IPPROTO_FRAGMENT",
    "IPPROTO_HOPOPTS",
    "IPPROTO_ICMP",
    "IPPROTO_ICMPV6",
    "IPPROTO_IDP",
    "IPPROTO_IGMP",
    "IPPROTO_IP",
    "IPPROTO_IPV6",
    "IPPROTO_NONE",
    "IPPROTO_PIM",
    "IPPROTO_PUP",
    "IPPROTO_RAW",
    "IPPROTO_ROUTING",
    "IPPROTO_SCTP",
    "IPPROTO_TCP",
    "IPPROTO_UDP",
    "IPV6_CHECKSUM",
    "IPV6_DONTFRAG",
    "IPV6_HOPLIMIT",
    "IPV6_HOPOPTS",
    "IPV6_JOIN_GROUP",
    "IPV6_LEAVE_GROUP",
    "IPV6_MULTICAST_HOPS",
    "IPV6_MULTICAST_IF",
    "IPV6_MULTICAST_LOOP",
    "IPV6_PKTINFO",
    "IPV6_RECVRTHDR",
    "IPV6_RECVTCLASS",
    "IPV6_RTHDR",
    "IPV6_TCLASS",
    "IPV6_UNICAST_HOPS",
    "IPV6_V6ONLY",
    "IP_ADD_MEMBERSHIP",
    "IP_DROP_MEMBERSHIP",
    "IP_HDRINCL",
    "IP_MULTICAST_IF",
    "IP_MULTICAST_LOOP",
    "IP_MULTICAST_TTL",
    "IP_OPTIONS",
    "IP_TOS",
    "IP_TTL",
    "MSG_CTRUNC",
    "MSG_DONTROUTE",
    "MSG_OOB",
    "MSG_PEEK",
    "MSG_TRUNC",
    "MSG_WAITALL",
    "NI_DGRAM",
    "NI_MAXHOST",
    "NI_MAXSERV",
    "NI_NAMEREQD",
    "NI_NOFQDN",
    "NI_NUMERICHOST",
    "NI_NUMERICSERV",
    "SHUT_RD",
    "SHUT_RDWR",
    "SHUT_WR",
    "SOCK_DGRAM",
    "SOCK_RAW",
    "SOCK_RDM",
    "SOCK_SEQPACKET",
    "SOCK_STREAM",
    "SOL_IP",
    "SOL_SOCKET",
    "SOL_TCP",
    "SOL_UDP",
    "SOMAXCONN",
    "SO_ACCEPTCONN",
    "SO_BROADCAST",
    "SO_DEBUG",
    "SO_DONTROUTE",
    "SO_ERROR",
    "SO_KEEPALIVE",
    "SO_LINGER",
    "SO_OOBINLINE",
    "SO_RCVBUF",
    "SO_RCVLOWAT",
    "SO_RCVTIMEO",
    "SO_REUSEADDR",
    "SO_SNDBUF",
    "SO_SNDLOWAT",
    "SO_SNDTIMEO",
    "SO_TYPE",
    "SocketType",
    "TCP_FASTOPEN",
    "TCP_KEEPCNT",
    "TCP_KEEPINTVL",
    "TCP_MAXSEG",
    "TCP_NODELAY",
    "close",
    "dup",
    "error",
    "gaierror",
    "getaddrinfo",
    "getdefaulttimeout",
    "gethostbyaddr",
    "gethostbyname",
    "gethostbyname_ex",
    "gethostname",
    "getnameinfo",
    "getprotobyname",
    "getservbyname",
    "getservbyport",
    "has_ipv6",
    "herror",
    "htonl",
    "htons",
    "if_indextoname",
    "if_nameindex",
    "if_nametoindex",
    "inet_aton",
    "inet_ntoa",
    "inet_ntop",
    "inet_pton",
    "ntohl",
    "ntohs",
    "setdefaulttimeout",
    "socket",
    "socketpair",
    "timeout",
]

if sys.platform == "win32":
    from _socket import (
        IPPROTO_CBT as IPPROTO_CBT,
    )
    from _socket import (
        IPPROTO_ICLFXBM as IPPROTO_ICLFXBM,
    )
    from _socket import (
        IPPROTO_IGP as IPPROTO_IGP,
    )
    from _socket import (
        IPPROTO_L2TP as IPPROTO_L2TP,
    )
    from _socket import (
        IPPROTO_PGM as IPPROTO_PGM,
    )
    from _socket import (
        IPPROTO_RDP as IPPROTO_RDP,
    )
    from _socket import (
        IPPROTO_ST as IPPROTO_ST,
    )
    from _socket import (
        RCVALL_MAX as RCVALL_MAX,
    )
    from _socket import (
        RCVALL_OFF as RCVALL_OFF,
    )
    from _socket import (
        RCVALL_ON as RCVALL_ON,
    )
    from _socket import (
        RCVALL_SOCKETLEVELONLY as RCVALL_SOCKETLEVELONLY,
    )
    from _socket import (
        SIO_KEEPALIVE_VALS as SIO_KEEPALIVE_VALS,
    )
    from _socket import (
        SIO_LOOPBACK_FAST_PATH as SIO_LOOPBACK_FAST_PATH,
    )
    from _socket import (
        SIO_RCVALL as SIO_RCVALL,
    )
    from _socket import (
        SO_EXCLUSIVEADDRUSE as SO_EXCLUSIVEADDRUSE,
    )

    __all__ += [
        "IPPROTO_CBT",
        "IPPROTO_ICLFXBM",
        "IPPROTO_IGP",
        "IPPROTO_L2TP",
        "IPPROTO_PGM",
        "IPPROTO_RDP",
        "IPPROTO_ST",
        "RCVALL_MAX",
        "RCVALL_OFF",
        "RCVALL_ON",
        "RCVALL_SOCKETLEVELONLY",
        "SIO_KEEPALIVE_VALS",
        "SIO_LOOPBACK_FAST_PATH",
        "SIO_RCVALL",
        "SO_EXCLUSIVEADDRUSE",
        "fromshare",
        "errorTab",
        "MSG_BCAST",
        "MSG_MCAST",
    ]

if sys.platform == "darwin":
    from _socket import PF_SYSTEM as PF_SYSTEM
    from _socket import SYSPROTO_CONTROL as SYSPROTO_CONTROL

    __all__ += ["PF_SYSTEM", "SYSPROTO_CONTROL", "AF_SYSTEM"]

if sys.platform != "darwin":
    from _socket import TCP_KEEPIDLE as TCP_KEEPIDLE

    __all__ += ["TCP_KEEPIDLE", "AF_IRDA", "MSG_ERRQUEUE"]

if sys.version_info >= (3, 10):
    from _socket import IP_RECVTOS as IP_RECVTOS

    __all__ += ["IP_RECVTOS"]

if sys.platform != "win32" and sys.platform != "darwin":
    from _socket import (
        IP_TRANSPARENT as IP_TRANSPARENT,
    )
    from _socket import (
        IPX_TYPE as IPX_TYPE,
    )
    from _socket import (
        SCM_CREDENTIALS as SCM_CREDENTIALS,
    )
    from _socket import (
        SO_DOMAIN as SO_DOMAIN,
    )
    from _socket import (
        SO_MARK as SO_MARK,
    )
    from _socket import (
        SO_PASSCRED as SO_PASSCRED,
    )
    from _socket import (
        SO_PASSSEC as SO_PASSSEC,
    )
    from _socket import (
        SO_PEERCRED as SO_PEERCRED,
    )
    from _socket import (
        SO_PEERSEC as SO_PEERSEC,
    )
    from _socket import (
        SO_PRIORITY as SO_PRIORITY,
    )
    from _socket import (
        SO_PROTOCOL as SO_PROTOCOL,
    )
    from _socket import (
        SOL_ATALK as SOL_ATALK,
    )
    from _socket import (
        SOL_AX25 as SOL_AX25,
    )
    from _socket import (
        SOL_HCI as SOL_HCI,
    )
    from _socket import (
        SOL_IPX as SOL_IPX,
    )
    from _socket import (
        SOL_NETROM as SOL_NETROM,
    )
    from _socket import (
        SOL_ROSE as SOL_ROSE,
    )
    from _socket import (
        TCP_CONGESTION as TCP_CONGESTION,
    )
    from _socket import (
        TCP_CORK as TCP_CORK,
    )
    from _socket import (
        TCP_DEFER_ACCEPT as TCP_DEFER_ACCEPT,
    )
    from _socket import (
        TCP_INFO as TCP_INFO,
    )
    from _socket import (
        TCP_LINGER2 as TCP_LINGER2,
    )
    from _socket import (
        TCP_QUICKACK as TCP_QUICKACK,
    )
    from _socket import (
        TCP_SYNCNT as TCP_SYNCNT,
    )
    from _socket import (
        TCP_USER_TIMEOUT as TCP_USER_TIMEOUT,
    )
    from _socket import (
        TCP_WINDOW_CLAMP as TCP_WINDOW_CLAMP,
    )

    __all__ += [
        "IP_TRANSPARENT",
        "SCM_CREDENTIALS",
        "SO_DOMAIN",
        "SO_MARK",
        "SO_PASSCRED",
        "SO_PASSSEC",
        "SO_PEERCRED",
        "SO_PEERSEC",
        "SO_PRIORITY",
        "SO_PROTOCOL",
        "TCP_CONGESTION",
        "TCP_CORK",
        "TCP_DEFER_ACCEPT",
        "TCP_INFO",
        "TCP_LINGER2",
        "TCP_QUICKACK",
        "TCP_SYNCNT",
        "TCP_USER_TIMEOUT",
        "TCP_WINDOW_CLAMP",
        "AF_ASH",
        "AF_ATMPVC",
        "AF_ATMSVC",
        "AF_AX25",
        "AF_BRIDGE",
        "AF_ECONET",
        "AF_KEY",
        "AF_LLC",
        "AF_NETBEUI",
        "AF_NETROM",
        "AF_PPPOX",
        "AF_ROSE",
        "AF_SECURITY",
        "AF_WANPIPE",
        "AF_X25",
        "MSG_CMSG_CLOEXEC",
        "MSG_CONFIRM",
        "MSG_FASTOPEN",
        "MSG_MORE",
    ]

if sys.platform != "win32" and sys.platform != "darwin" and sys.version_info >= (3, 11):
    from _socket import IP_BIND_ADDRESS_NO_PORT as IP_BIND_ADDRESS_NO_PORT

    __all__ += ["IP_BIND_ADDRESS_NO_PORT"]

if sys.platform != "win32":
    from _socket import (
        CMSG_LEN as CMSG_LEN,
    )
    from _socket import (
        CMSG_SPACE as CMSG_SPACE,
    )
    from _socket import (
        EAI_ADDRFAMILY as EAI_ADDRFAMILY,
    )
    from _socket import (
        EAI_OVERFLOW as EAI_OVERFLOW,
    )
    from _socket import (
        EAI_SYSTEM as EAI_SYSTEM,
    )
    from _socket import (
        IP_DEFAULT_MULTICAST_LOOP as IP_DEFAULT_MULTICAST_LOOP,
    )
    from _socket import (
        IP_DEFAULT_MULTICAST_TTL as IP_DEFAULT_MULTICAST_TTL,
    )
    from _socket import (
        IP_MAX_MEMBERSHIPS as IP_MAX_MEMBERSHIPS,
    )
    from _socket import (
        IP_RECVOPTS as IP_RECVOPTS,
    )
    from _socket import (
        IP_RECVRETOPTS as IP_RECVRETOPTS,
    )
    from _socket import (
        IP_RETOPTS as IP_RETOPTS,
    )
    from _socket import (
        IPPROTO_GRE as IPPROTO_GRE,
    )
    from _socket import (
        IPPROTO_IPIP as IPPROTO_IPIP,
    )
    from _socket import (
        IPPROTO_RSVP as IPPROTO_RSVP,
    )
    from _socket import (
        IPPROTO_TP as IPPROTO_TP,
    )
    from _socket import (
        IPV6_RTHDR_TYPE_0 as IPV6_RTHDR_TYPE_0,
    )
    from _socket import (
        SCM_RIGHTS as SCM_RIGHTS,
    )
    from _socket import (
        SO_REUSEPORT as SO_REUSEPORT,
    )
    from _socket import (
        TCP_NOTSENT_LOWAT as TCP_NOTSENT_LOWAT,
    )
    from _socket import (
        sethostname as sethostname,
    )

    __all__ += [
        "CMSG_LEN",
        "CMSG_SPACE",
        "EAI_ADDRFAMILY",
        "EAI_OVERFLOW",
        "EAI_SYSTEM",
        "IP_DEFAULT_MULTICAST_LOOP",
        "IP_DEFAULT_MULTICAST_TTL",
        "IP_MAX_MEMBERSHIPS",
        "IP_RECVOPTS",
        "IP_RECVRETOPTS",
        "IP_RETOPTS",
        "IPPROTO_GRE",
        "IPPROTO_IPIP",
        "IPPROTO_RSVP",
        "IPPROTO_TP",
        "IPV6_RTHDR_TYPE_0",
        "SCM_RIGHTS",
        "SO_REUSEPORT",
        "TCP_NOTSENT_LOWAT",
        "sethostname",
        "AF_ROUTE",
        "AF_UNIX",
        "MSG_DONTWAIT",
        "MSG_EOR",
        "MSG_NOSIGNAL",
    ]

    from _socket import (
        IPV6_DSTOPTS as IPV6_DSTOPTS,
    )
    from _socket import (
        IPV6_NEXTHOP as IPV6_NEXTHOP,
    )
    from _socket import (
        IPV6_PATHMTU as IPV6_PATHMTU,
    )
    from _socket import (
        IPV6_RECVDSTOPTS as IPV6_RECVDSTOPTS,
    )
    from _socket import (
        IPV6_RECVHOPLIMIT as IPV6_RECVHOPLIMIT,
    )
    from _socket import (
        IPV6_RECVHOPOPTS as IPV6_RECVHOPOPTS,
    )
    from _socket import (
        IPV6_RECVPATHMTU as IPV6_RECVPATHMTU,
    )
    from _socket import (
        IPV6_RECVPKTINFO as IPV6_RECVPKTINFO,
    )
    from _socket import (
        IPV6_RTHDRDSTOPTS as IPV6_RTHDRDSTOPTS,
    )

    __all__ += [
        "IPV6_DSTOPTS",
        "IPV6_NEXTHOP",
        "IPV6_PATHMTU",
        "IPV6_RECVDSTOPTS",
        "IPV6_RECVHOPLIMIT",
        "IPV6_RECVHOPOPTS",
        "IPV6_RECVPATHMTU",
        "IPV6_RECVPKTINFO",
        "IPV6_RTHDRDSTOPTS",
    ]

    if sys.platform != "darwin" or sys.version_info >= (3, 13):
        from _socket import SO_BINDTODEVICE as SO_BINDTODEVICE

        __all__ += ["SO_BINDTODEVICE"]

if sys.platform != "darwin" and sys.platform != "linux":
    from _socket import BDADDR_ANY as BDADDR_ANY
    from _socket import BDADDR_LOCAL as BDADDR_LOCAL
    from _socket import BTPROTO_RFCOMM as BTPROTO_RFCOMM

    __all__ += ["BDADDR_ANY", "BDADDR_LOCAL", "BTPROTO_RFCOMM"]

if sys.platform == "darwin" and sys.version_info >= (3, 10):
    from _socket import TCP_KEEPALIVE as TCP_KEEPALIVE

    __all__ += ["TCP_KEEPALIVE"]

if sys.platform == "darwin" and sys.version_info >= (3, 11):
    from _socket import TCP_CONNECTION_INFO as TCP_CONNECTION_INFO

    __all__ += ["TCP_CONNECTION_INFO"]

if sys.platform == "linux":
    from _socket import (
        ALG_OP_DECRYPT as ALG_OP_DECRYPT,
    )
    from _socket import (
        ALG_OP_ENCRYPT as ALG_OP_ENCRYPT,
    )
    from _socket import (
        ALG_OP_SIGN as ALG_OP_SIGN,
    )
    from _socket import (
        ALG_OP_VERIFY as ALG_OP_VERIFY,
    )
    from _socket import (
        ALG_SET_AEAD_ASSOCLEN as ALG_SET_AEAD_ASSOCLEN,
    )
    from _socket import (
        ALG_SET_AEAD_AUTHSIZE as ALG_SET_AEAD_AUTHSIZE,
    )
    from _socket import (
        ALG_SET_IV as ALG_SET_IV,
    )
    from _socket import (
        ALG_SET_KEY as ALG_SET_KEY,
    )
    from _socket import (
        ALG_SET_OP as ALG_SET_OP,
    )
    from _socket import (
        ALG_SET_PUBKEY as ALG_SET_PUBKEY,
    )
    from _socket import (
        CAN_BCM as CAN_BCM,
    )
    from _socket import (
        CAN_BCM_CAN_FD_FRAME as CAN_BCM_CAN_FD_FRAME,
    )
    from _socket import (
        CAN_BCM_RX_ANNOUNCE_RESUME as CAN_BCM_RX_ANNOUNCE_RESUME,
    )
    from _socket import (
        CAN_BCM_RX_CHANGED as CAN_BCM_RX_CHANGED,
    )
    from _socket import (
        CAN_BCM_RX_CHECK_DLC as CAN_BCM_RX_CHECK_DLC,
    )
    from _socket import (
        CAN_BCM_RX_DELETE as CAN_BCM_RX_DELETE,
    )
    from _socket import (
        CAN_BCM_RX_FILTER_ID as CAN_BCM_RX_FILTER_ID,
    )
    from _socket import (
        CAN_BCM_RX_NO_AUTOTIMER as CAN_BCM_RX_NO_AUTOTIMER,
    )
    from _socket import (
        CAN_BCM_RX_READ as CAN_BCM_RX_READ,
    )
    from _socket import (
        CAN_BCM_RX_RTR_FRAME as CAN_BCM_RX_RTR_FRAME,
    )
    from _socket import (
        CAN_BCM_RX_SETUP as CAN_BCM_RX_SETUP,
    )
    from _socket import (
        CAN_BCM_RX_STATUS as CAN_BCM_RX_STATUS,
    )
    from _socket import (
        CAN_BCM_RX_TIMEOUT as CAN_BCM_RX_TIMEOUT,
    )
    from _socket import (
        CAN_BCM_SETTIMER as CAN_BCM_SETTIMER,
    )
    from _socket import (
        CAN_BCM_STARTTIMER as CAN_BCM_STARTTIMER,
    )
    from _socket import (
        CAN_BCM_TX_ANNOUNCE as CAN_BCM_TX_ANNOUNCE,
    )
    from _socket import (
        CAN_BCM_TX_COUNTEVT as CAN_BCM_TX_COUNTEVT,
    )
    from _socket import (
        CAN_BCM_TX_CP_CAN_ID as CAN_BCM_TX_CP_CAN_ID,
    )
    from _socket import (
        CAN_BCM_TX_DELETE as CAN_BCM_TX_DELETE,
    )
    from _socket import (
        CAN_BCM_TX_EXPIRED as CAN_BCM_TX_EXPIRED,
    )
    from _socket import (
        CAN_BCM_TX_READ as CAN_BCM_TX_READ,
    )
    from _socket import (
        CAN_BCM_TX_RESET_MULTI_IDX as CAN_BCM_TX_RESET_MULTI_IDX,
    )
    from _socket import (
        CAN_BCM_TX_SEND as CAN_BCM_TX_SEND,
    )
    from _socket import (
        CAN_BCM_TX_SETUP as CAN_BCM_TX_SETUP,
    )
    from _socket import (
        CAN_BCM_TX_STATUS as CAN_BCM_TX_STATUS,
    )
    from _socket import (
        CAN_EFF_FLAG as CAN_EFF_FLAG,
    )
    from _socket import (
        CAN_EFF_MASK as CAN_EFF_MASK,
    )
    from _socket import (
        CAN_ERR_FLAG as CAN_ERR_FLAG,
    )
    from _socket import (
        CAN_ERR_MASK as CAN_ERR_MASK,
    )
    from _socket import (
        CAN_ISOTP as CAN_ISOTP,
    )
    from _socket import (
        CAN_RAW as CAN_RAW,
    )
    from _socket import (
        CAN_RAW_FD_FRAMES as CAN_RAW_FD_FRAMES,
    )
    from _socket import (
        CAN_RAW_FILTER as CAN_RAW_FILTER,
    )
    from _socket import (
        CAN_RAW_LOOPBACK as CAN_RAW_LOOPBACK,
    )
    from _socket import (
        CAN_RAW_RECV_OWN_MSGS as CAN_RAW_RECV_OWN_MSGS,
    )
    from _socket import (
        CAN_RTR_FLAG as CAN_RTR_FLAG,
    )
    from _socket import (
        CAN_SFF_MASK as CAN_SFF_MASK,
    )
    from _socket import (
        IOCTL_VM_SOCKETS_GET_LOCAL_CID as IOCTL_VM_SOCKETS_GET_LOCAL_CID,
    )
    from _socket import (
        NETLINK_CRYPTO as NETLINK_CRYPTO,
    )
    from _socket import (
        NETLINK_DNRTMSG as NETLINK_DNRTMSG,
    )
    from _socket import (
        NETLINK_FIREWALL as NETLINK_FIREWALL,
    )
    from _socket import (
        NETLINK_IP6_FW as NETLINK_IP6_FW,
    )
    from _socket import (
        NETLINK_NFLOG as NETLINK_NFLOG,
    )
    from _socket import (
        NETLINK_ROUTE as NETLINK_ROUTE,
    )
    from _socket import (
        NETLINK_USERSOCK as NETLINK_USERSOCK,
    )
    from _socket import (
        NETLINK_XFRM as NETLINK_XFRM,
    )
    from _socket import (
        PACKET_BROADCAST as PACKET_BROADCAST,
    )
    from _socket import (
        PACKET_FASTROUTE as PACKET_FASTROUTE,
    )
    from _socket import (
        PACKET_HOST as PACKET_HOST,
    )
    from _socket import (
        PACKET_LOOPBACK as PACKET_LOOPBACK,
    )
    from _socket import (
        PACKET_MULTICAST as PACKET_MULTICAST,
    )
    from _socket import (
        PACKET_OTHERHOST as PACKET_OTHERHOST,
    )
    from _socket import (
        PACKET_OUTGOING as PACKET_OUTGOING,
    )
    from _socket import (
        PF_CAN as PF_CAN,
    )
    from _socket import (
        PF_PACKET as PF_PACKET,
    )
    from _socket import (
        PF_RDS as PF_RDS,
    )
    from _socket import (
        RDS_CANCEL_SENT_TO as RDS_CANCEL_SENT_TO,
    )
    from _socket import (
        RDS_CMSG_RDMA_ARGS as RDS_CMSG_RDMA_ARGS,
    )
    from _socket import (
        RDS_CMSG_RDMA_DEST as RDS_CMSG_RDMA_DEST,
    )
    from _socket import (
        RDS_CMSG_RDMA_MAP as RDS_CMSG_RDMA_MAP,
    )
    from _socket import (
        RDS_CMSG_RDMA_STATUS as RDS_CMSG_RDMA_STATUS,
    )
    from _socket import (
        RDS_CONG_MONITOR as RDS_CONG_MONITOR,
    )
    from _socket import (
        RDS_FREE_MR as RDS_FREE_MR,
    )
    from _socket import (
        RDS_GET_MR as RDS_GET_MR,
    )
    from _socket import (
        RDS_GET_MR_FOR_DEST as RDS_GET_MR_FOR_DEST,
    )
    from _socket import (
        RDS_RDMA_DONTWAIT as RDS_RDMA_DONTWAIT,
    )
    from _socket import (
        RDS_RDMA_FENCE as RDS_RDMA_FENCE,
    )
    from _socket import (
        RDS_RDMA_INVALIDATE as RDS_RDMA_INVALIDATE,
    )
    from _socket import (
        RDS_RDMA_NOTIFY_ME as RDS_RDMA_NOTIFY_ME,
    )
    from _socket import (
        RDS_RDMA_READWRITE as RDS_RDMA_READWRITE,
    )
    from _socket import (
        RDS_RDMA_SILENT as RDS_RDMA_SILENT,
    )
    from _socket import (
        RDS_RDMA_USE_ONCE as RDS_RDMA_USE_ONCE,
    )
    from _socket import (
        RDS_RECVERR as RDS_RECVERR,
    )
    from _socket import (
        SO_VM_SOCKETS_BUFFER_MAX_SIZE as SO_VM_SOCKETS_BUFFER_MAX_SIZE,
    )
    from _socket import (
        SO_VM_SOCKETS_BUFFER_MIN_SIZE as SO_VM_SOCKETS_BUFFER_MIN_SIZE,
    )
    from _socket import (
        SO_VM_SOCKETS_BUFFER_SIZE as SO_VM_SOCKETS_BUFFER_SIZE,
    )
    from _socket import (
        SOL_ALG as SOL_ALG,
    )
    from _socket import (
        SOL_CAN_BASE as SOL_CAN_BASE,
    )
    from _socket import (
        SOL_CAN_RAW as SOL_CAN_RAW,
    )
    from _socket import (
        SOL_RDS as SOL_RDS,
    )
    from _socket import (
        SOL_TIPC as SOL_TIPC,
    )
    from _socket import (
        TIPC_ADDR_ID as TIPC_ADDR_ID,
    )
    from _socket import (
        TIPC_ADDR_NAME as TIPC_ADDR_NAME,
    )
    from _socket import (
        TIPC_ADDR_NAMESEQ as TIPC_ADDR_NAMESEQ,
    )
    from _socket import (
        TIPC_CFG_SRV as TIPC_CFG_SRV,
    )
    from _socket import (
        TIPC_CLUSTER_SCOPE as TIPC_CLUSTER_SCOPE,
    )
    from _socket import (
        TIPC_CONN_TIMEOUT as TIPC_CONN_TIMEOUT,
    )
    from _socket import (
        TIPC_CRITICAL_IMPORTANCE as TIPC_CRITICAL_IMPORTANCE,
    )
    from _socket import (
        TIPC_DEST_DROPPABLE as TIPC_DEST_DROPPABLE,
    )
    from _socket import (
        TIPC_HIGH_IMPORTANCE as TIPC_HIGH_IMPORTANCE,
    )
    from _socket import (
        TIPC_IMPORTANCE as TIPC_IMPORTANCE,
    )
    from _socket import (
        TIPC_LOW_IMPORTANCE as TIPC_LOW_IMPORTANCE,
    )
    from _socket import (
        TIPC_MEDIUM_IMPORTANCE as TIPC_MEDIUM_IMPORTANCE,
    )
    from _socket import (
        TIPC_NODE_SCOPE as TIPC_NODE_SCOPE,
    )
    from _socket import (
        TIPC_PUBLISHED as TIPC_PUBLISHED,
    )
    from _socket import (
        TIPC_SRC_DROPPABLE as TIPC_SRC_DROPPABLE,
    )
    from _socket import (
        TIPC_SUB_CANCEL as TIPC_SUB_CANCEL,
    )
    from _socket import (
        TIPC_SUB_PORTS as TIPC_SUB_PORTS,
    )
    from _socket import (
        TIPC_SUB_SERVICE as TIPC_SUB_SERVICE,
    )
    from _socket import (
        TIPC_SUBSCR_TIMEOUT as TIPC_SUBSCR_TIMEOUT,
    )
    from _socket import (
        TIPC_TOP_SRV as TIPC_TOP_SRV,
    )
    from _socket import (
        TIPC_WAIT_FOREVER as TIPC_WAIT_FOREVER,
    )
    from _socket import (
        TIPC_WITHDRAWN as TIPC_WITHDRAWN,
    )
    from _socket import (
        TIPC_ZONE_SCOPE as TIPC_ZONE_SCOPE,
    )
    from _socket import (
        VM_SOCKETS_INVALID_VERSION as VM_SOCKETS_INVALID_VERSION,
    )
    from _socket import (
        VMADDR_CID_ANY as VMADDR_CID_ANY,
    )
    from _socket import (
        VMADDR_CID_HOST as VMADDR_CID_HOST,
    )
    from _socket import (
        VMADDR_PORT_ANY as VMADDR_PORT_ANY,
    )

    __all__ += [
        "ALG_OP_DECRYPT",
        "ALG_OP_ENCRYPT",
        "ALG_OP_SIGN",
        "ALG_OP_VERIFY",
        "ALG_SET_AEAD_ASSOCLEN",
        "ALG_SET_AEAD_AUTHSIZE",
        "ALG_SET_IV",
        "ALG_SET_KEY",
        "ALG_SET_OP",
        "ALG_SET_PUBKEY",
        "CAN_BCM",
        "CAN_BCM_CAN_FD_FRAME",
        "CAN_BCM_RX_ANNOUNCE_RESUME",
        "CAN_BCM_RX_CHANGED",
        "CAN_BCM_RX_CHECK_DLC",
        "CAN_BCM_RX_DELETE",
        "CAN_BCM_RX_FILTER_ID",
        "CAN_BCM_RX_NO_AUTOTIMER",
        "CAN_BCM_RX_READ",
        "CAN_BCM_RX_RTR_FRAME",
        "CAN_BCM_RX_SETUP",
        "CAN_BCM_RX_STATUS",
        "CAN_BCM_RX_TIMEOUT",
        "CAN_BCM_SETTIMER",
        "CAN_BCM_STARTTIMER",
        "CAN_BCM_TX_ANNOUNCE",
        "CAN_BCM_TX_COUNTEVT",
        "CAN_BCM_TX_CP_CAN_ID",
        "CAN_BCM_TX_DELETE",
        "CAN_BCM_TX_EXPIRED",
        "CAN_BCM_TX_READ",
        "CAN_BCM_TX_RESET_MULTI_IDX",
        "CAN_BCM_TX_SEND",
        "CAN_BCM_TX_SETUP",
        "CAN_BCM_TX_STATUS",
        "CAN_EFF_FLAG",
        "CAN_EFF_MASK",
        "CAN_ERR_FLAG",
        "CAN_ERR_MASK",
        "CAN_ISOTP",
        "CAN_RAW",
        "CAN_RAW_FD_FRAMES",
        "CAN_RAW_FILTER",
        "CAN_RAW_LOOPBACK",
        "CAN_RAW_RECV_OWN_MSGS",
        "CAN_RTR_FLAG",
        "CAN_SFF_MASK",
        "IOCTL_VM_SOCKETS_GET_LOCAL_CID",
        "NETLINK_CRYPTO",
        "NETLINK_DNRTMSG",
        "NETLINK_FIREWALL",
        "NETLINK_IP6_FW",
        "NETLINK_NFLOG",
        "NETLINK_ROUTE",
        "NETLINK_USERSOCK",
        "NETLINK_XFRM",
        "PACKET_BROADCAST",
        "PACKET_FASTROUTE",
        "PACKET_HOST",
        "PACKET_LOOPBACK",
        "PACKET_MULTICAST",
        "PACKET_OTHERHOST",
        "PACKET_OUTGOING",
        "PF_CAN",
        "PF_PACKET",
        "PF_RDS",
        "SO_VM_SOCKETS_BUFFER_MAX_SIZE",
        "SO_VM_SOCKETS_BUFFER_MIN_SIZE",
        "SO_VM_SOCKETS_BUFFER_SIZE",
        "SOL_ALG",
        "SOL_CAN_BASE",
        "SOL_CAN_RAW",
        "SOL_RDS",
        "SOL_TIPC",
        "TIPC_ADDR_ID",
        "TIPC_ADDR_NAME",
        "TIPC_ADDR_NAMESEQ",
        "TIPC_CFG_SRV",
        "TIPC_CLUSTER_SCOPE",
        "TIPC_CONN_TIMEOUT",
        "TIPC_CRITICAL_IMPORTANCE",
        "TIPC_DEST_DROPPABLE",
        "TIPC_HIGH_IMPORTANCE",
        "TIPC_IMPORTANCE",
        "TIPC_LOW_IMPORTANCE",
        "TIPC_MEDIUM_IMPORTANCE",
        "TIPC_NODE_SCOPE",
        "TIPC_PUBLISHED",
        "TIPC_SRC_DROPPABLE",
        "TIPC_SUB_CANCEL",
        "TIPC_SUB_PORTS",
        "TIPC_SUB_SERVICE",
        "TIPC_SUBSCR_TIMEOUT",
        "TIPC_TOP_SRV",
        "TIPC_WAIT_FOREVER",
        "TIPC_WITHDRAWN",
        "TIPC_ZONE_SCOPE",
        "VM_SOCKETS_INVALID_VERSION",
        "VMADDR_CID_ANY",
        "VMADDR_CID_HOST",
        "VMADDR_PORT_ANY",
        "AF_CAN",
        "AF_PACKET",
        "AF_RDS",
        "AF_TIPC",
        "AF_ALG",
        "AF_NETLINK",
        "AF_VSOCK",
        "AF_QIPCRTR",
        "SOCK_CLOEXEC",
        "SOCK_NONBLOCK",
    ]

    if sys.version_info < (3, 11):
        from _socket import CAN_RAW_ERR_FILTER as CAN_RAW_ERR_FILTER

        __all__ += ["CAN_RAW_ERR_FILTER"]
    if sys.version_info >= (3, 13):
        from _socket import CAN_RAW_ERR_FILTER as CAN_RAW_ERR_FILTER

        __all__ += ["CAN_RAW_ERR_FILTER"]

if sys.platform == "linux":
    from _socket import (
        CAN_J1939 as CAN_J1939,
    )
    from _socket import (
        CAN_RAW_JOIN_FILTERS as CAN_RAW_JOIN_FILTERS,
    )
    from _socket import (
        IPPROTO_UDPLITE as IPPROTO_UDPLITE,
    )
    from _socket import (
        J1939_EE_INFO_NONE as J1939_EE_INFO_NONE,
    )
    from _socket import (
        J1939_EE_INFO_TX_ABORT as J1939_EE_INFO_TX_ABORT,
    )
    from _socket import (
        J1939_FILTER_MAX as J1939_FILTER_MAX,
    )
    from _socket import (
        J1939_IDLE_ADDR as J1939_IDLE_ADDR,
    )
    from _socket import (
        J1939_MAX_UNICAST_ADDR as J1939_MAX_UNICAST_ADDR,
    )
    from _socket import (
        J1939_NLA_BYTES_ACKED as J1939_NLA_BYTES_ACKED,
    )
    from _socket import (
        J1939_NLA_PAD as J1939_NLA_PAD,
    )
    from _socket import (
        J1939_NO_ADDR as J1939_NO_ADDR,
    )
    from _socket import (
        J1939_NO_NAME as J1939_NO_NAME,
    )
    from _socket import (
        J1939_NO_PGN as J1939_NO_PGN,
    )
    from _socket import (
        J1939_PGN_ADDRESS_CLAIMED as J1939_PGN_ADDRESS_CLAIMED,
    )
    from _socket import (
        J1939_PGN_ADDRESS_COMMANDED as J1939_PGN_ADDRESS_COMMANDED,
    )
    from _socket import (
        J1939_PGN_MAX as J1939_PGN_MAX,
    )
    from _socket import (
        J1939_PGN_PDU1_MAX as J1939_PGN_PDU1_MAX,
    )
    from _socket import (
        J1939_PGN_REQUEST as J1939_PGN_REQUEST,
    )
    from _socket import (
        SCM_J1939_DEST_ADDR as SCM_J1939_DEST_ADDR,
    )
    from _socket import (
        SCM_J1939_DEST_NAME as SCM_J1939_DEST_NAME,
    )
    from _socket import (
        SCM_J1939_ERRQUEUE as SCM_J1939_ERRQUEUE,
    )
    from _socket import (
        SCM_J1939_PRIO as SCM_J1939_PRIO,
    )
    from _socket import (
        SO_J1939_ERRQUEUE as SO_J1939_ERRQUEUE,
    )
    from _socket import (
        SO_J1939_FILTER as SO_J1939_FILTER,
    )
    from _socket import (
        SO_J1939_PROMISC as SO_J1939_PROMISC,
    )
    from _socket import (
        SO_J1939_SEND_PRIO as SO_J1939_SEND_PRIO,
    )
    from _socket import (
        UDPLITE_RECV_CSCOV as UDPLITE_RECV_CSCOV,
    )
    from _socket import (
        UDPLITE_SEND_CSCOV as UDPLITE_SEND_CSCOV,
    )

    __all__ += [
        "CAN_J1939",
        "CAN_RAW_JOIN_FILTERS",
        "IPPROTO_UDPLITE",
        "J1939_EE_INFO_NONE",
        "J1939_EE_INFO_TX_ABORT",
        "J1939_FILTER_MAX",
        "J1939_IDLE_ADDR",
        "J1939_MAX_UNICAST_ADDR",
        "J1939_NLA_BYTES_ACKED",
        "J1939_NLA_PAD",
        "J1939_NO_ADDR",
        "J1939_NO_NAME",
        "J1939_NO_PGN",
        "J1939_PGN_ADDRESS_CLAIMED",
        "J1939_PGN_ADDRESS_COMMANDED",
        "J1939_PGN_MAX",
        "J1939_PGN_PDU1_MAX",
        "J1939_PGN_REQUEST",
        "SCM_J1939_DEST_ADDR",
        "SCM_J1939_DEST_NAME",
        "SCM_J1939_ERRQUEUE",
        "SCM_J1939_PRIO",
        "SO_J1939_ERRQUEUE",
        "SO_J1939_FILTER",
        "SO_J1939_PROMISC",
        "SO_J1939_SEND_PRIO",
        "UDPLITE_RECV_CSCOV",
        "UDPLITE_SEND_CSCOV",
    ]
if sys.platform == "linux" and sys.version_info >= (3, 10):
    from _socket import IPPROTO_MPTCP as IPPROTO_MPTCP

    __all__ += ["IPPROTO_MPTCP"]
if sys.platform == "linux" and sys.version_info >= (3, 11):
    from _socket import SO_INCOMING_CPU as SO_INCOMING_CPU

    __all__ += ["SO_INCOMING_CPU"]
if sys.platform == "linux" and sys.version_info >= (3, 12):
    from _socket import (
        TCP_CC_INFO as TCP_CC_INFO,
    )
    from _socket import (
        TCP_FASTOPEN_CONNECT as TCP_FASTOPEN_CONNECT,
    )
    from _socket import (
        TCP_FASTOPEN_KEY as TCP_FASTOPEN_KEY,
    )
    from _socket import (
        TCP_FASTOPEN_NO_COOKIE as TCP_FASTOPEN_NO_COOKIE,
    )
    from _socket import (
        TCP_INQ as TCP_INQ,
    )
    from _socket import (
        TCP_MD5SIG as TCP_MD5SIG,
    )
    from _socket import (
        TCP_MD5SIG_EXT as TCP_MD5SIG_EXT,
    )
    from _socket import (
        TCP_QUEUE_SEQ as TCP_QUEUE_SEQ,
    )
    from _socket import (
        TCP_REPAIR as TCP_REPAIR,
    )
    from _socket import (
        TCP_REPAIR_OPTIONS as TCP_REPAIR_OPTIONS,
    )
    from _socket import (
        TCP_REPAIR_QUEUE as TCP_REPAIR_QUEUE,
    )
    from _socket import (
        TCP_REPAIR_WINDOW as TCP_REPAIR_WINDOW,
    )
    from _socket import (
        TCP_SAVE_SYN as TCP_SAVE_SYN,
    )
    from _socket import (
        TCP_SAVED_SYN as TCP_SAVED_SYN,
    )
    from _socket import (
        TCP_THIN_DUPACK as TCP_THIN_DUPACK,
    )
    from _socket import (
        TCP_THIN_LINEAR_TIMEOUTS as TCP_THIN_LINEAR_TIMEOUTS,
    )
    from _socket import (
        TCP_TIMESTAMP as TCP_TIMESTAMP,
    )
    from _socket import (
        TCP_TX_DELAY as TCP_TX_DELAY,
    )
    from _socket import (
        TCP_ULP as TCP_ULP,
    )
    from _socket import (
        TCP_ZEROCOPY_RECEIVE as TCP_ZEROCOPY_RECEIVE,
    )

    __all__ += [
        "TCP_CC_INFO",
        "TCP_FASTOPEN_CONNECT",
        "TCP_FASTOPEN_KEY",
        "TCP_FASTOPEN_NO_COOKIE",
        "TCP_INQ",
        "TCP_MD5SIG",
        "TCP_MD5SIG_EXT",
        "TCP_QUEUE_SEQ",
        "TCP_REPAIR",
        "TCP_REPAIR_OPTIONS",
        "TCP_REPAIR_QUEUE",
        "TCP_REPAIR_WINDOW",
        "TCP_SAVED_SYN",
        "TCP_SAVE_SYN",
        "TCP_THIN_DUPACK",
        "TCP_THIN_LINEAR_TIMEOUTS",
        "TCP_TIMESTAMP",
        "TCP_TX_DELAY",
        "TCP_ULP",
        "TCP_ZEROCOPY_RECEIVE",
    ]

if sys.platform == "linux" and sys.version_info >= (3, 13):
    from _socket import NI_IDN as NI_IDN
    from _socket import SO_BINDTOIFINDEX as SO_BINDTOIFINDEX

    __all__ += ["NI_IDN", "SO_BINDTOIFINDEX"]

if sys.version_info >= (3, 12):
    from _socket import (
        IP_ADD_SOURCE_MEMBERSHIP as IP_ADD_SOURCE_MEMBERSHIP,
    )
    from _socket import (
        IP_BLOCK_SOURCE as IP_BLOCK_SOURCE,
    )
    from _socket import (
        IP_DROP_SOURCE_MEMBERSHIP as IP_DROP_SOURCE_MEMBERSHIP,
    )
    from _socket import (
        IP_PKTINFO as IP_PKTINFO,
    )
    from _socket import (
        IP_UNBLOCK_SOURCE as IP_UNBLOCK_SOURCE,
    )

    __all__ += [
        "IP_ADD_SOURCE_MEMBERSHIP",
        "IP_BLOCK_SOURCE",
        "IP_DROP_SOURCE_MEMBERSHIP",
        "IP_PKTINFO",
        "IP_UNBLOCK_SOURCE",
    ]

    if sys.platform == "win32":
        from _socket import (
            HV_GUID_BROADCAST as HV_GUID_BROADCAST,
        )
        from _socket import (
            HV_GUID_CHILDREN as HV_GUID_CHILDREN,
        )
        from _socket import (
            HV_GUID_LOOPBACK as HV_GUID_LOOPBACK,
        )
        from _socket import (
            HV_GUID_PARENT as HV_GUID_PARENT,
        )
        from _socket import (
            HV_GUID_WILDCARD as HV_GUID_WILDCARD,
        )
        from _socket import (
            HV_GUID_ZERO as HV_GUID_ZERO,
        )
        from _socket import (
            HV_PROTOCOL_RAW as HV_PROTOCOL_RAW,
        )
        from _socket import (
            HVSOCKET_ADDRESS_FLAG_PASSTHRU as HVSOCKET_ADDRESS_FLAG_PASSTHRU,
        )
        from _socket import (
            HVSOCKET_CONNECT_TIMEOUT as HVSOCKET_CONNECT_TIMEOUT,
        )
        from _socket import (
            HVSOCKET_CONNECT_TIMEOUT_MAX as HVSOCKET_CONNECT_TIMEOUT_MAX,
        )
        from _socket import (
            HVSOCKET_CONNECTED_SUSPEND as HVSOCKET_CONNECTED_SUSPEND,
        )

        __all__ += [
            "HV_GUID_BROADCAST",
            "HV_GUID_CHILDREN",
            "HV_GUID_LOOPBACK",
            "HV_GUID_PARENT",
            "HV_GUID_WILDCARD",
            "HV_GUID_ZERO",
            "HV_PROTOCOL_RAW",
            "HVSOCKET_ADDRESS_FLAG_PASSTHRU",
            "HVSOCKET_CONNECT_TIMEOUT",
            "HVSOCKET_CONNECT_TIMEOUT_MAX",
            "HVSOCKET_CONNECTED_SUSPEND",
        ]
    else:
        from _socket import (
            ETHERTYPE_ARP as ETHERTYPE_ARP,
        )
        from _socket import (
            ETHERTYPE_IP as ETHERTYPE_IP,
        )
        from _socket import (
            ETHERTYPE_IPV6 as ETHERTYPE_IPV6,
        )
        from _socket import (
            ETHERTYPE_VLAN as ETHERTYPE_VLAN,
        )

        __all__ += ["ETHERTYPE_ARP", "ETHERTYPE_IP", "ETHERTYPE_IPV6", "ETHERTYPE_VLAN"]

    if sys.platform == "linux":
        from _socket import ETH_P_ALL as ETH_P_ALL

        __all__ += ["ETH_P_ALL"]

    if sys.platform != "linux" and sys.platform != "win32" and sys.platform != "darwin":
        # FreeBSD >= 14.0
        from _socket import PF_DIVERT as PF_DIVERT

        __all__ += ["PF_DIVERT", "AF_DIVERT"]

if sys.platform != "win32":
    __all__ += ["send_fds", "recv_fds"]

if sys.platform != "linux":
    __all__ += ["AF_LINK"]
if sys.platform != "darwin" and sys.platform != "linux":
    __all__ += ["AF_BLUETOOTH"]

if sys.platform == "win32" and sys.version_info >= (3, 12):
    __all__ += ["AF_HYPERV"]

if sys.platform != "win32" and sys.platform != "linux":
    from _socket import (
        EAI_BADHINTS as EAI_BADHINTS,
    )
    from _socket import (
        EAI_MAX as EAI_MAX,
    )
    from _socket import (
        EAI_PROTOCOL as EAI_PROTOCOL,
    )
    from _socket import (
        IPPROTO_EON as IPPROTO_EON,
    )
    from _socket import (
        IPPROTO_HELLO as IPPROTO_HELLO,
    )
    from _socket import (
        IPPROTO_IPCOMP as IPPROTO_IPCOMP,
    )
    from _socket import (
        IPPROTO_XTP as IPPROTO_XTP,
    )
    from _socket import (
        IPV6_USE_MIN_MTU as IPV6_USE_MIN_MTU,
    )
    from _socket import (
        LOCAL_PEERCRED as LOCAL_PEERCRED,
    )
    from _socket import (
        SCM_CREDS as SCM_CREDS,
    )

    __all__ += [
        "EAI_BADHINTS",
        "EAI_MAX",
        "EAI_PROTOCOL",
        "IPPROTO_EON",
        "IPPROTO_HELLO",
        "IPPROTO_IPCOMP",
        "IPPROTO_XTP",
        "IPV6_USE_MIN_MTU",
        "LOCAL_PEERCRED",
        "SCM_CREDS",
        "AI_DEFAULT",
        "AI_MASK",
        "AI_V4MAPPED_CFG",
        "MSG_EOF",
    ]

if sys.platform != "win32" and sys.platform != "darwin" and sys.platform != "linux":
    from _socket import (
        IPPROTO_BIP as IPPROTO_BIP,
    )
    from _socket import (
        IPPROTO_MOBILE as IPPROTO_MOBILE,
    )
    from _socket import (
        IPPROTO_VRRP as IPPROTO_VRRP,
    )
    from _socket import (
        MSG_BTAG as MSG_BTAG,
    )
    from _socket import (
        MSG_ETAG as MSG_ETAG,
    )
    from _socket import (
        SO_SETFIB as SO_SETFIB,
    )

    __all__ += [
        "SO_SETFIB",
        "MSG_BTAG",
        "MSG_ETAG",
        "IPPROTO_BIP",
        "IPPROTO_MOBILE",
        "IPPROTO_VRRP",
        "MSG_NOTIFICATION",
    ]

if sys.platform != "linux":
    from _socket import (
        IP_RECVDSTADDR as IP_RECVDSTADDR,
    )
    from _socket import (
        IPPROTO_GGP as IPPROTO_GGP,
    )
    from _socket import (
        IPPROTO_IPV4 as IPPROTO_IPV4,
    )
    from _socket import (
        IPPROTO_MAX as IPPROTO_MAX,
    )
    from _socket import (
        IPPROTO_ND as IPPROTO_ND,
    )
    from _socket import (
        SO_USELOOPBACK as SO_USELOOPBACK,
    )

    __all__ += ["IPPROTO_GGP", "IPPROTO_IPV4", "IPPROTO_MAX", "IPPROTO_ND", "IP_RECVDSTADDR", "SO_USELOOPBACK"]

if sys.version_info >= (3, 14):
    from _socket import IP_RECVTTL as IP_RECVTTL

    __all__ += ["IP_RECVTTL"]

    if sys.platform == "win32" or sys.platform == "linux":
        from _socket import IP_RECVERR as IP_RECVERR
        from _socket import IPV6_RECVERR as IPV6_RECVERR
        from _socket import SO_ORIGINAL_DST as SO_ORIGINAL_DST

        __all__ += ["IP_RECVERR", "IPV6_RECVERR", "SO_ORIGINAL_DST"]

    if sys.platform == "win32":
        from _socket import (
            SO_BTH_ENCRYPT as SO_BTH_ENCRYPT,
        )
        from _socket import (
            SO_BTH_MTU as SO_BTH_MTU,
        )
        from _socket import (
            SO_BTH_MTU_MAX as SO_BTH_MTU_MAX,
        )
        from _socket import (
            SO_BTH_MTU_MIN as SO_BTH_MTU_MIN,
        )
        from _socket import (
            SOL_RFCOMM as SOL_RFCOMM,
        )
        from _socket import (
            TCP_QUICKACK as TCP_QUICKACK,
        )

        __all__ += ["SOL_RFCOMM", "SO_BTH_ENCRYPT", "SO_BTH_MTU", "SO_BTH_MTU_MAX", "SO_BTH_MTU_MIN", "TCP_QUICKACK"]

    if sys.platform == "linux":
        from _socket import (
            IP_FREEBIND as IP_FREEBIND,
        )
        from _socket import (
            IP_RECVORIGDSTADDR as IP_RECVORIGDSTADDR,
        )
        from _socket import (
            VMADDR_CID_LOCAL as VMADDR_CID_LOCAL,
        )

        __all__ += ["IP_FREEBIND", "IP_RECVORIGDSTADDR", "VMADDR_CID_LOCAL"]

# Re-exported from errno
EBADF: int
EAGAIN: int
EWOULDBLOCK: int

# These errors are implemented in _socket at runtime
# but they consider themselves to live in socket so we'll put them here.
error = OSError

class herror(error): ...
class gaierror(error): ...

if sys.version_info >= (3, 10):
    timeout = TimeoutError
else:
    class timeout(error): ...

class AddressFamily(IntEnum):
    AF_INET = 2
    AF_INET6 = 10
    AF_APPLETALK = 5
    AF_IPX = 4
    AF_SNA = 22
    AF_UNSPEC = 0
    if sys.platform != "darwin":
        AF_IRDA = 23
    if sys.platform != "win32":
        AF_ROUTE = 16
        AF_UNIX = 1
    if sys.platform == "darwin":
        AF_SYSTEM = 32
    if sys.platform != "win32" and sys.platform != "darwin":
        AF_ASH = 18
        AF_ATMPVC = 8
        AF_ATMSVC = 20
        AF_AX25 = 3
        AF_BRIDGE = 7
        AF_ECONET = 19
        AF_KEY = 15
        AF_LLC = 26
        AF_NETBEUI = 13
        AF_NETROM = 6
        AF_PPPOX = 24
        AF_ROSE = 11
        AF_SECURITY = 14
        AF_WANPIPE = 25
        AF_X25 = 9
    if sys.platform == "linux":
        AF_CAN = 29
        AF_PACKET = 17
        AF_RDS = 21
        AF_TIPC = 30
        AF_ALG = 38
        AF_NETLINK = 16
        AF_VSOCK = 40
        AF_QIPCRTR = 42
    if sys.platform != "linux":
        AF_LINK = 33
    if sys.platform != "darwin" and sys.platform != "linux":
        AF_BLUETOOTH = 32
    if sys.platform == "win32" and sys.version_info >= (3, 12):
        AF_HYPERV = 34
    if sys.platform != "linux" and sys.platform != "win32" and sys.platform != "darwin" and sys.version_info >= (3, 12):
        # FreeBSD >= 14.0
        AF_DIVERT = 44

AF_INET = AddressFamily.AF_INET
AF_INET6 = AddressFamily.AF_INET6
AF_APPLETALK = AddressFamily.AF_APPLETALK
AF_DECnet: Literal[12]
AF_IPX = AddressFamily.AF_IPX
AF_SNA = AddressFamily.AF_SNA
AF_UNSPEC = AddressFamily.AF_UNSPEC

if sys.platform != "darwin":
    AF_IRDA = AddressFamily.AF_IRDA

if sys.platform != "win32":
    AF_ROUTE = AddressFamily.AF_ROUTE
    AF_UNIX = AddressFamily.AF_UNIX

if sys.platform == "darwin":
    AF_SYSTEM = AddressFamily.AF_SYSTEM

if sys.platform != "win32" and sys.platform != "darwin":
    AF_ASH = AddressFamily.AF_ASH
    AF_ATMPVC = AddressFamily.AF_ATMPVC
    AF_ATMSVC = AddressFamily.AF_ATMSVC
    AF_AX25 = AddressFamily.AF_AX25
    AF_BRIDGE = AddressFamily.AF_BRIDGE
    AF_ECONET = AddressFamily.AF_ECONET
    AF_KEY = AddressFamily.AF_KEY
    AF_LLC = AddressFamily.AF_LLC
    AF_NETBEUI = AddressFamily.AF_NETBEUI
    AF_NETROM = AddressFamily.AF_NETROM
    AF_PPPOX = AddressFamily.AF_PPPOX
    AF_ROSE = AddressFamily.AF_ROSE
    AF_SECURITY = AddressFamily.AF_SECURITY
    AF_WANPIPE = AddressFamily.AF_WANPIPE
    AF_X25 = AddressFamily.AF_X25

if sys.platform == "linux":
    AF_CAN = AddressFamily.AF_CAN
    AF_PACKET = AddressFamily.AF_PACKET
    AF_RDS = AddressFamily.AF_RDS
    AF_TIPC = AddressFamily.AF_TIPC
    AF_ALG = AddressFamily.AF_ALG
    AF_NETLINK = AddressFamily.AF_NETLINK
    AF_VSOCK = AddressFamily.AF_VSOCK
    AF_QIPCRTR = AddressFamily.AF_QIPCRTR

if sys.platform != "linux":
    AF_LINK = AddressFamily.AF_LINK
if sys.platform != "darwin" and sys.platform != "linux":
    AF_BLUETOOTH = AddressFamily.AF_BLUETOOTH
if sys.platform == "win32" and sys.version_info >= (3, 12):
    AF_HYPERV = AddressFamily.AF_HYPERV
if sys.platform != "linux" and sys.platform != "win32" and sys.platform != "darwin" and sys.version_info >= (3, 12):
    # FreeBSD >= 14.0
    AF_DIVERT = AddressFamily.AF_DIVERT

class SocketKind(IntEnum):
    SOCK_STREAM = 1
    SOCK_DGRAM = 2
    SOCK_RAW = 3
    SOCK_RDM = 4
    SOCK_SEQPACKET = 5
    if sys.platform == "linux":
        SOCK_CLOEXEC = 524288
        SOCK_NONBLOCK = 2048

SOCK_STREAM = SocketKind.SOCK_STREAM
SOCK_DGRAM = SocketKind.SOCK_DGRAM
SOCK_RAW = SocketKind.SOCK_RAW
SOCK_RDM = SocketKind.SOCK_RDM
SOCK_SEQPACKET = SocketKind.SOCK_SEQPACKET
if sys.platform == "linux":
    SOCK_CLOEXEC = SocketKind.SOCK_CLOEXEC
    SOCK_NONBLOCK = SocketKind.SOCK_NONBLOCK

class MsgFlag(IntFlag):
    MSG_CTRUNC = 8
    MSG_DONTROUTE = 4
    MSG_OOB = 1
    MSG_PEEK = 2
    MSG_TRUNC = 32
    MSG_WAITALL = 256
    if sys.platform == "win32":
        MSG_BCAST = 1024
        MSG_MCAST = 2048

    if sys.platform != "darwin":
        MSG_ERRQUEUE = 8192

    if sys.platform != "win32" and sys.platform != "darwin":
        MSG_CMSG_CLOEXEC = 1073741821
        MSG_CONFIRM = 2048
        MSG_FASTOPEN = 536870912
        MSG_MORE = 32768

    if sys.platform != "win32" and sys.platform != "darwin" and sys.platform != "linux":
        MSG_NOTIFICATION = 8192

    if sys.platform != "win32":
        MSG_DONTWAIT = 64
        MSG_EOR = 128
        MSG_NOSIGNAL = 16384  # sometimes this exists on darwin, sometimes not
    if sys.platform != "win32" and sys.platform != "linux":
        MSG_EOF = 256

MSG_CTRUNC = MsgFlag.MSG_CTRUNC
MSG_DONTROUTE = MsgFlag.MSG_DONTROUTE
MSG_OOB = MsgFlag.MSG_OOB
MSG_PEEK = MsgFlag.MSG_PEEK
MSG_TRUNC = MsgFlag.MSG_TRUNC
MSG_WAITALL = MsgFlag.MSG_WAITALL

if sys.platform == "win32":
    MSG_BCAST = MsgFlag.MSG_BCAST
    MSG_MCAST = MsgFlag.MSG_MCAST

if sys.platform != "darwin":
    MSG_ERRQUEUE = MsgFlag.MSG_ERRQUEUE

if sys.platform != "win32":
    MSG_DONTWAIT = MsgFlag.MSG_DONTWAIT
    MSG_EOR = MsgFlag.MSG_EOR
    MSG_NOSIGNAL = MsgFlag.MSG_NOSIGNAL  # Sometimes this exists on darwin, sometimes not

if sys.platform != "win32" and sys.platform != "darwin":
    MSG_CMSG_CLOEXEC = MsgFlag.MSG_CMSG_CLOEXEC
    MSG_CONFIRM = MsgFlag.MSG_CONFIRM
    MSG_FASTOPEN = MsgFlag.MSG_FASTOPEN
    MSG_MORE = MsgFlag.MSG_MORE

if sys.platform != "win32" and sys.platform != "darwin" and sys.platform != "linux":
    MSG_NOTIFICATION = MsgFlag.MSG_NOTIFICATION

if sys.platform != "win32" and sys.platform != "linux":
    MSG_EOF = MsgFlag.MSG_EOF

class AddressInfo(IntFlag):
    AI_ADDRCONFIG = 32
    AI_ALL = 16
    AI_CANONNAME = 2
    AI_NUMERICHOST = 4
    AI_NUMERICSERV = 1024
    AI_PASSIVE = 1
    AI_V4MAPPED = 8
    if sys.platform != "win32" and sys.platform != "linux":
        AI_DEFAULT = 1536
        AI_MASK = 5127
        AI_V4MAPPED_CFG = 512

AI_ADDRCONFIG = AddressInfo.AI_ADDRCONFIG
AI_ALL = AddressInfo.AI_ALL
AI_CANONNAME = AddressInfo.AI_CANONNAME
AI_NUMERICHOST = AddressInfo.AI_NUMERICHOST
AI_NUMERICSERV = AddressInfo.AI_NUMERICSERV
AI_PASSIVE = AddressInfo.AI_PASSIVE
AI_V4MAPPED = AddressInfo.AI_V4MAPPED

if sys.platform != "win32" and sys.platform != "linux":
    AI_DEFAULT = AddressInfo.AI_DEFAULT
    AI_MASK = AddressInfo.AI_MASK
    AI_V4MAPPED_CFG = AddressInfo.AI_V4MAPPED_CFG

if sys.platform == "win32":
    errorTab: dict[int, str]  # undocumented

@type_check_only
class _SendableFile(Protocol):
    def read(self, size: int, /) -> bytes: ...
    def seek(self, offset: int, /) -> object: ...

    # optional fields:
    #
    # @property
    # def mode(self) -> str: ...
    # def fileno(self) -> int: ...

class socket(_socket.socket):
    def __init__(
        self, family: AddressFamily | int = -1, type: SocketKind | int = -1, proto: int = -1, fileno: int | None = None
    ) -> None: ...
    def __enter__(self) -> Self: ...
    def __exit__(self, *args: Unused) -> None: ...
    def dup(self) -> Self: ...
    def accept(self) -> tuple[socket, _RetAddress]: ...
    # Note that the makefile's documented windows-specific behavior is not represented
    # mode strings with duplicates are intentionally excluded
    @overload
    def makefile(
        self,
        mode: Literal["b", "rb", "br", "wb", "bw", "rwb", "rbw", "wrb", "wbr", "brw", "bwr"],
        buffering: Literal[0],
        *,
        encoding: str | None = None,
        errors: str | None = None,
        newline: str | None = None,
    ) -> SocketIO: ...
    @overload
    def makefile(
        self,
        mode: Literal["rwb", "rbw", "wrb", "wbr", "brw", "bwr"],
        buffering: Literal[-1, 1] | None = None,
        *,
        encoding: str | None = None,
        errors: str | None = None,
        newline: str | None = None,
    ) -> BufferedRWPair: ...
    @overload
    def makefile(
        self,
        mode: Literal["rb", "br"],
        buffering: Literal[-1, 1] | None = None,
        *,
        encoding: str | None = None,
        errors: str | None = None,
        newline: str | None = None,
    ) -> BufferedReader: ...
    @overload
    def makefile(
        self,
        mode: Literal["wb", "bw"],
        buffering: Literal[-1, 1] | None = None,
        *,
        encoding: str | None = None,
        errors: str | None = None,
        newline: str | None = None,
    ) -> BufferedWriter: ...
    @overload
    def makefile(
        self,
        mode: Literal["b", "rb", "br", "wb", "bw", "rwb", "rbw", "wrb", "wbr", "brw", "bwr"],
        buffering: int,
        *,
        encoding: str | None = None,
        errors: str | None = None,
        newline: str | None = None,
    ) -> IOBase: ...
    @overload
    def makefile(
        self,
        mode: Literal["r", "w", "rw", "wr", ""] = "r",
        buffering: int | None = None,
        *,
        encoding: str | None = None,
        errors: str | None = None,
        newline: str | None = None,
    ) -> TextIOWrapper: ...
    def sendfile(self, file: _SendableFile, offset: int = 0, count: int | None = None) -> int: ...
    @property
    def family(self) -> AddressFamily: ...
    @property
    def type(self) -> SocketKind: ...
    def get_inheritable(self) -> bool: ...
    def set_inheritable(self, inheritable: bool) -> None: ...

def fromfd(fd: SupportsIndex, family: AddressFamily | int, type: SocketKind | int, proto: int = 0) -> socket: ...

if sys.platform != "win32":
    def send_fds(
        sock: socket, buffers: Iterable[ReadableBuffer], fds: Iterable[int], flags: Unused = 0, address: Unused = None
    ) -> int: ...
    def recv_fds(sock: socket, bufsize: int, maxfds: int, flags: int = 0) -> tuple[bytes, list[int], int, Any]: ...

if sys.platform == "win32":
    def fromshare(info: bytes) -> socket: ...

if sys.platform == "win32":
    def socketpair(family: int = ..., type: int = ..., proto: int = 0) -> tuple[socket, socket]: ...

else:
    def socketpair(
        family: int | AddressFamily | None = None, type: SocketType | int = ..., proto: int = 0
    ) -> tuple[socket, socket]: ...

class SocketIO(RawIOBase):
    def __init__(self, sock: socket, mode: Literal["r", "w", "rw", "rb", "wb", "rwb"]) -> None: ...
    def readinto(self, b: WriteableBuffer) -> int | None: ...
    def write(self, b: ReadableBuffer) -> int | None: ...
    @property
    def name(self) -> int: ...  # return value is really "int"
    @property
    def mode(self) -> Literal["rb", "wb", "rwb"]: ...

def getfqdn(name: str = "") -> str: ...

if sys.version_info >= (3, 11):
    def create_connection(
        address: tuple[str | None, int],
        timeout: float | None = ...,
        source_address: _Address | None = None,
        *,
        all_errors: bool = False,
    ) -> socket: ...

else:
    def create_connection(
        address: tuple[str | None, int], timeout: float | None = ..., source_address: _Address | None = None
    ) -> socket: ...

def has_dualstack_ipv6() -> bool: ...
def create_server(
    address: _Address,
    *,
    family: int = ...,
    backlog: int | None = None,
    reuse_port: bool = False,
    dualstack_ipv6: bool = False,
) -> socket: ...

# The 5th tuple item is the socket address, for IP4, IP6, or IP6 if Python is compiled with --disable-ipv6, respectively.
def getaddrinfo(
    host: bytes | str | None,
    port: bytes | str | int | None,
    family: int = 0,
    type: int = 0,
    proto: int = 0,
    flags: int = 0,
) -> list[
    tuple[AddressFamily, SocketKind, int, str, tuple[str, int] | tuple[str, int, int, int] | tuple[int, bytes]]
]: ...
