import sys
from decimal import (
    Clamped as Clamped,
)
from decimal import (
    Context as Context,
)
from decimal import (
    ConversionSyntax as ConversionSyntax,
)
from decimal import (
    Decimal as Decimal,
)
from decimal import (
    DecimalException as DecimalException,
)
from decimal import (
    DecimalTuple as DecimalTuple,
)
from decimal import (
    DivisionByZero as DivisionByZero,
)
from decimal import (
    DivisionImpossible as DivisionImpossible,
)
from decimal import (
    DivisionUndefined as DivisionUndefined,
)
from decimal import (
    FloatOperation as FloatOperation,
)
from decimal import (
    Inexact as Inexact,
)
from decimal import (
    InvalidContext as InvalidContext,
)
from decimal import (
    InvalidOperation as InvalidOperation,
)
from decimal import (
    Overflow as Overflow,
)
from decimal import (
    Rounded as Rounded,
)
from decimal import (
    Subnormal as Subnormal,
)
from decimal import (
    Underflow as Underflow,
)
from decimal import (
    _ContextManager,
)
from typing import Final

from typing_extensions import TypeAlias

_TrapType: TypeAlias = type[DecimalException]

__version__: Final[str]
__libmpdec_version__: Final[str]

ROUND_DOWN: Final = "ROUND_DOWN"
ROUND_HALF_UP: Final = "ROUND_HALF_UP"
ROUND_HALF_EVEN: Final = "ROUND_HALF_EVEN"
ROUND_CEILING: Final = "ROUND_CEILING"
ROUND_FLOOR: Final = "ROUND_FLOOR"
ROUND_UP: Final = "ROUND_UP"
ROUND_HALF_DOWN: Final = "ROUND_HALF_DOWN"
ROUND_05UP: Final = "ROUND_05UP"
HAVE_CONTEXTVAR: Final[bool]
HAVE_THREADS: Final[bool]
MAX_EMAX: Final[int]
MAX_PREC: Final[int]
MIN_EMIN: Final[int]
MIN_ETINY: Final[int]
if sys.version_info >= (3, 14):
    IEEE_CONTEXT_MAX_BITS: Final[int]

def setcontext(context: Context, /) -> None: ...
def getcontext() -> Context: ...

if sys.version_info >= (3, 11):
    def localcontext(
        ctx: Context | None = None,
        *,
        prec: int | None = ...,
        rounding: str | None = ...,
        Emin: int | None = ...,
        Emax: int | None = ...,
        capitals: int | None = ...,
        clamp: int | None = ...,
        traps: dict[_TrapType, bool] | None = ...,
        flags: dict[_TrapType, bool] | None = ...,
    ) -> _ContextManager: ...

else:
    def localcontext(ctx: Context | None = None) -> _ContextManager: ...

if sys.version_info >= (3, 14):
    def IEEEContext(bits: int, /) -> Context: ...

DefaultContext: Context
BasicContext: Context
ExtendedContext: Context
