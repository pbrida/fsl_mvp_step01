import sys
from _operator import (
    abs as abs,
)
from _operator import (
    add as add,
)
from _operator import (
    and_ as and_,
)
from _operator import (
    concat as concat,
)
from _operator import (
    contains as contains,
)
from _operator import (
    countOf as countOf,
)
from _operator import (
    delitem as delitem,
)
from _operator import (
    eq as eq,
)
from _operator import (
    floordiv as floordiv,
)
from _operator import (
    ge as ge,
)
from _operator import (
    getitem as getitem,
)
from _operator import (
    gt as gt,
)
from _operator import (
    iadd as iadd,
)
from _operator import (
    iand as iand,
)
from _operator import (
    iconcat as iconcat,
)
from _operator import (
    ifloordiv as ifloordiv,
)
from _operator import (
    ilshift as ilshift,
)
from _operator import (
    imatmul as imatmul,
)
from _operator import (
    imod as imod,
)
from _operator import (
    imul as imul,
)
from _operator import (
    index as index,
)
from _operator import (
    indexOf as indexOf,
)
from _operator import (
    inv as inv,
)
from _operator import (
    invert as invert,
)
from _operator import (
    ior as ior,
)
from _operator import (
    ipow as ipow,
)
from _operator import (
    irshift as irshift,
)
from _operator import (
    is_ as is_,
)
from _operator import (
    is_not as is_not,
)
from _operator import (
    isub as isub,
)
from _operator import (
    itruediv as itruediv,
)
from _operator import (
    ixor as ixor,
)
from _operator import (
    le as le,
)
from _operator import (
    length_hint as length_hint,
)
from _operator import (
    lshift as lshift,
)
from _operator import (
    lt as lt,
)
from _operator import (
    matmul as matmul,
)
from _operator import (
    mod as mod,
)
from _operator import (
    mul as mul,
)
from _operator import (
    ne as ne,
)
from _operator import (
    neg as neg,
)
from _operator import (
    not_ as not_,
)
from _operator import (
    or_ as or_,
)
from _operator import (
    pos as pos,
)
from _operator import (
    pow as pow,
)
from _operator import (
    rshift as rshift,
)
from _operator import (
    setitem as setitem,
)
from _operator import (
    sub as sub,
)
from _operator import (
    truediv as truediv,
)
from _operator import (
    truth as truth,
)
from _operator import (
    xor as xor,
)
from typing import Any, Generic, TypeVar, final, overload

from _typeshed import SupportsGetItem
from typing_extensions import Self, TypeVarTuple, Unpack

_T = TypeVar("_T")
_T_co = TypeVar("_T_co", covariant=True)
_T1 = TypeVar("_T1")
_T2 = TypeVar("_T2")
_Ts = TypeVarTuple("_Ts")

__all__ = [
    "abs",
    "add",
    "and_",
    "attrgetter",
    "concat",
    "contains",
    "countOf",
    "delitem",
    "eq",
    "floordiv",
    "ge",
    "getitem",
    "gt",
    "iadd",
    "iand",
    "iconcat",
    "ifloordiv",
    "ilshift",
    "imatmul",
    "imod",
    "imul",
    "index",
    "indexOf",
    "inv",
    "invert",
    "ior",
    "ipow",
    "irshift",
    "is_",
    "is_not",
    "isub",
    "itemgetter",
    "itruediv",
    "ixor",
    "le",
    "length_hint",
    "lshift",
    "lt",
    "matmul",
    "methodcaller",
    "mod",
    "mul",
    "ne",
    "neg",
    "not_",
    "or_",
    "pos",
    "pow",
    "rshift",
    "setitem",
    "sub",
    "truediv",
    "truth",
    "xor",
]

if sys.version_info >= (3, 11):
    from _operator import call as call

    __all__ += ["call"]

if sys.version_info >= (3, 14):
    from _operator import is_none as is_none
    from _operator import is_not_none as is_not_none

    __all__ += ["is_none", "is_not_none"]

__lt__ = lt
__le__ = le
__eq__ = eq
__ne__ = ne
__ge__ = ge
__gt__ = gt
__not__ = not_
__abs__ = abs
__add__ = add
__and__ = and_
__floordiv__ = floordiv
__index__ = index
__inv__ = inv
__invert__ = invert
__lshift__ = lshift
__mod__ = mod
__mul__ = mul
__matmul__ = matmul
__neg__ = neg
__or__ = or_
__pos__ = pos
__pow__ = pow
__rshift__ = rshift
__sub__ = sub
__truediv__ = truediv
__xor__ = xor
__concat__ = concat
__contains__ = contains
__delitem__ = delitem
__getitem__ = getitem
__setitem__ = setitem
__iadd__ = iadd
__iand__ = iand
__iconcat__ = iconcat
__ifloordiv__ = ifloordiv
__ilshift__ = ilshift
__imod__ = imod
__imul__ = imul
__imatmul__ = imatmul
__ior__ = ior
__ipow__ = ipow
__irshift__ = irshift
__isub__ = isub
__itruediv__ = itruediv
__ixor__ = ixor
if sys.version_info >= (3, 11):
    __call__ = call

# At runtime, these classes are implemented in C as part of the _operator module
# However, they consider themselves to live in the operator module, so we'll put
# them here.
@final
class attrgetter(Generic[_T_co]):
    @overload
    def __new__(cls, attr: str, /) -> attrgetter[Any]: ...
    @overload
    def __new__(cls, attr: str, attr2: str, /) -> attrgetter[tuple[Any, Any]]: ...
    @overload
    def __new__(cls, attr: str, attr2: str, attr3: str, /) -> attrgetter[tuple[Any, Any, Any]]: ...
    @overload
    def __new__(cls, attr: str, attr2: str, attr3: str, attr4: str, /) -> attrgetter[tuple[Any, Any, Any, Any]]: ...
    @overload
    def __new__(cls, attr: str, /, *attrs: str) -> attrgetter[tuple[Any, ...]]: ...
    def __call__(self, obj: Any, /) -> _T_co: ...

@final
class itemgetter(Generic[_T_co]):
    @overload
    def __new__(cls, item: _T, /) -> itemgetter[_T]: ...
    @overload
    def __new__(cls, item1: _T1, item2: _T2, /, *items: Unpack[_Ts]) -> itemgetter[tuple[_T1, _T2, Unpack[_Ts]]]: ...
    # __key: _KT_contra in SupportsGetItem seems to be causing variance issues, ie:
    # TypeVar "_KT_contra@SupportsGetItem" is contravariant
    #   "tuple[int, int]" is incompatible with protocol "SupportsIndex"
    # preventing [_T_co, ...] instead of [Any, ...]
    #
    # A suspected mypy issue prevents using [..., _T] instead of [..., Any] here.
    # https://github.com/python/mypy/issues/14032
    def __call__(self, obj: SupportsGetItem[Any, Any]) -> Any: ...

@final
class methodcaller:
    def __new__(cls, name: str, /, *args: Any, **kwargs: Any) -> Self: ...
    def __call__(self, obj: Any) -> Any: ...
