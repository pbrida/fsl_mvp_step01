from collections.abc import Callable
from typing import Any, TypeVar, overload

from psycopg2 import errors as errors
from psycopg2 import extensions as extensions
from psycopg2._psycopg import (
    BINARY as BINARY,
)
from psycopg2._psycopg import (
    DATETIME as DATETIME,
)
from psycopg2._psycopg import (
    NUMBER as NUMBER,
)
from psycopg2._psycopg import (
    ROWID as ROWID,
)
from psycopg2._psycopg import (
    STRING as STRING,
)
from psycopg2._psycopg import (
    Binary as Binary,
)
from psycopg2._psycopg import (
    DatabaseError as DatabaseError,
)
from psycopg2._psycopg import (
    DataError as DataError,
)
from psycopg2._psycopg import (
    Date as Date,
)
from psycopg2._psycopg import (
    DateFromTicks as DateFromTicks,
)
from psycopg2._psycopg import (
    Error as Error,
)
from psycopg2._psycopg import (
    IntegrityError as IntegrityError,
)
from psycopg2._psycopg import (
    InterfaceError as InterfaceError,
)
from psycopg2._psycopg import (
    InternalError as InternalError,
)
from psycopg2._psycopg import (
    NotSupportedError as NotSupportedError,
)
from psycopg2._psycopg import (
    OperationalError as OperationalError,
)
from psycopg2._psycopg import (
    ProgrammingError as ProgrammingError,
)
from psycopg2._psycopg import (
    Time as Time,
)
from psycopg2._psycopg import (
    TimeFromTicks as TimeFromTicks,
)
from psycopg2._psycopg import (
    Timestamp as Timestamp,
)
from psycopg2._psycopg import (
    TimestampFromTicks as TimestampFromTicks,
)
from psycopg2._psycopg import (
    Warning as Warning,
)
from psycopg2._psycopg import (
    __libpq_version__ as __libpq_version__,
)
from psycopg2._psycopg import (
    apilevel as apilevel,
)
from psycopg2._psycopg import (
    connection,
    cursor,
)
from psycopg2._psycopg import (
    paramstyle as paramstyle,
)
from psycopg2._psycopg import (
    threadsafety as threadsafety,
)

_T_conn = TypeVar("_T_conn", bound=connection)

@overload
def connect(
    dsn: str | None,
    connection_factory: Callable[..., _T_conn],
    cursor_factory: Callable[[connection, str | bytes | None], cursor] | None = None,
    **kwargs: Any,
) -> _T_conn: ...
@overload
def connect(
    dsn: str | None = None,
    *,
    connection_factory: Callable[..., _T_conn],
    cursor_factory: Callable[[connection, str | bytes | None], cursor] | None = None,
    **kwargs: Any,
) -> _T_conn: ...
@overload
def connect(
    dsn: str | None = None,
    connection_factory: Callable[..., connection] | None = None,
    cursor_factory: Callable[[connection, str | bytes | None], cursor] | None = None,
    **kwargs: Any,
) -> connection: ...
